{
  "version": 3,
  "sources": ["../src/index.ts", "../src/clientAtom.ts", "../src/atomWithQuery.ts", "../src/common.ts", "../src/atomWithObservable.ts", "../src/atomWithMutation.ts"],
  "sourcesContent": ["export * from './clientAtom'\nexport * from './atomWithQuery'\nexport * from './atomWithMutation'\n", "import { atom } from 'jotai'\nimport { ApolloClient } from '@apollo/client'\n\nlet client: ApolloClient<unknown> | null = null\nlet resolveClient: (client: ApolloClient<unknown>) => void\nconst clientPromise = new Promise<ApolloClient<unknown>>((resolve) => {\n  resolveClient = resolve\n})\n\nexport function initJotaiApollo(newClient: ApolloClient<unknown>) {\n  if (client !== null && client !== newClient) {\n    throw new Error(`Can setup jotai-apollo only once`)\n  }\n\n  client = newClient\n  resolveClient(client)\n}\n\nexport const clientAtom = atom(\n  async () => clientPromise,\n  (_get, _set, client: ApolloClient<unknown>) => {\n    initJotaiApollo(client)\n  }\n)\n", "import {\n  ApolloClient,\n  OperationVariables,\n  ApolloQueryResult,\n  ObservableQuery,\n  ApolloError,\n  NetworkStatus,\n  WatchQueryOptions,\n} from '@apollo/client'\nimport { atom, Getter, WritableAtom } from 'jotai'\n\nimport { clientAtom } from './clientAtom'\nimport { atomWithIncrement } from './common'\nimport { atomWithObservable } from './atomWithObservable'\n\ntype QueryArgs<\n  Variables extends object = OperationVariables,\n  Data = any\n> = WatchQueryOptions<Variables, Data>\n\ntype AtomWithQueryAction = {\n  type: 'refetch'\n}\n\nexport const atomWithQuery = <\n  Data,\n  Variables extends object = OperationVariables\n>(\n  getArgs: (get: Getter) => QueryArgs<Variables, Data>,\n  onError?: (result: ApolloQueryResult<Data | undefined>) => void,\n  getClient: (get: Getter) => Promise<ApolloClient<unknown>> = (get) =>\n    get(clientAtom)\n): WritableAtom<\n  Promise<ApolloQueryResult<Data | undefined>>,\n  [AtomWithQueryAction],\n  void\n> => {\n  const refreshAtom = atomWithIncrement(0)\n\n  const handleActionAtom = atom(\n    null,\n    (_get, set, action: AtomWithQueryAction) => {\n      if (action.type === 'refetch') {\n        set(refreshAtom)\n      }\n    }\n  )\n\n  const wrapperAtom = atom(async (get) => {\n    const client = await getClient(get)\n\n    /**\n     * Gets incremented when the Apollo client clears the store.\n     */\n    const storeVersionAtom = atomWithObservable(\n      (get) => {\n        get(refreshAtom)\n        let version = 0\n\n        return {\n          subscribe(observer: Observer<number>) {\n            return {\n              unsubscribe: client.onClearStore(async () => {\n                observer.next(++version)\n              }),\n            }\n          },\n        }\n      },\n      { initialValue: 0 }\n    )\n\n    const sourceAtom = atomWithObservable((get) => {\n      get(storeVersionAtom)\n      const args = getArgs(get)\n\n      return wrapObservable(client.watchQuery(args))\n    })\n\n    return sourceAtom\n  })\n\n  return atom(\n    async (get) => {\n      const sourceAtom = await get(wrapperAtom)\n      const result = await get(sourceAtom)\n\n      if (result.error) {\n        if (onError) {\n          onError(result)\n        } else {\n          throw result.error\n        }\n      }\n\n      return result\n    },\n    (_get, set, action: AtomWithQueryAction) => set(handleActionAtom, action)\n  )\n}\n\ntype Observer<T> = {\n  next: (value: T) => void\n  error: (error: unknown) => void\n  complete: () => void\n}\n\ntype Subscription = {\n  unsubscribe: () => void\n}\n\nconst wrapObservable = <\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  observableQuery: ObservableQuery<TData, TVariables>\n) => ({\n  subscribe: (\n    observer: Partial<Observer<ApolloQueryResult<TData | undefined>>>\n  ): Subscription => {\n    let subscription = observableQuery.subscribe(onNext, onError)\n\n    function onNext(result: ApolloQueryResult<TData>) {\n      observer.next?.(result)\n    }\n\n    function onError(error: unknown) {\n      const last = observableQuery['last']\n      subscription.unsubscribe()\n\n      try {\n        observableQuery.resetLastResults()\n        subscription = observableQuery.subscribe(onNext, onError)\n      } finally {\n        observableQuery['last'] = last\n      }\n\n      const errorResult: ApolloQueryResult<TData | undefined> = {\n        data: observableQuery.getCurrentResult().data,\n        error: error as ApolloError,\n        loading: false,\n        networkStatus: NetworkStatus.error,\n      }\n\n      // Errors are returned as part of the result\n      observer.next?.(errorResult)\n    }\n\n    return {\n      unsubscribe: () => subscription.unsubscribe(),\n    }\n  },\n})\n", "import { atom } from 'jotai'\nimport type { Getter } from 'jotai'\nimport { atomWithObservable } from 'jotai/utils'\nimport { ApolloClient, ApolloQueryResult } from '@apollo/client'\n\ntype Client<T extends unknown = unknown> = ApolloClient<T>\n\nexport type Observer<T> = {\n  next: (value: T) => void\n  error: (error: any) => void\n  complete: () => void\n}\n\nexport type Observable<T> = {\n  subscribe(observer: Partial<Observer<T>>): { unsubscribe: () => void }\n}\n\nexport const atomWithIncrement = (initialValue: number) => {\n  const internalAtom = atom(initialValue)\n\n  return atom(\n    (get) => get(internalAtom),\n    (_get, set) => set(internalAtom, (c) => c + 1)\n  )\n}\n\nexport const createAtoms = <\n  Args,\n  Data,\n  Source extends Observable<ApolloQueryResult<Data>>,\n  Action,\n  ActionResult extends Promise<void> | void = void\n>(\n  getArgs: (get: Getter) => Args,\n  getClient: (get: Getter) => Client,\n  execute: (client: Client, args: Args) => Source,\n  handleAction: (\n    action: Action,\n    client: Client,\n    refresh: () => void\n  ) => ActionResult\n) => {\n  const refreshAtom = atomWithIncrement(0)\n\n  const handleActionAtom = atom(null, (get, set, action: Action) => {\n    const client = getClient(get)\n    const refresh = () => set(refreshAtom)\n\n    return handleAction(action, client, refresh)\n  })\n\n  const sourceAtom = atomWithObservable(\n    (get) => {\n      get(refreshAtom)\n      const args = getArgs(get)\n      const client = getClient(get)\n\n      return execute(client, args)\n    },\n    { initialValue: null }\n  )\n\n  const statusAtom = atom(\n    (get) => get(sourceAtom),\n    (_get, set, action: Action) => set(handleActionAtom, action)\n  )\n\n  const dataAtom = atom(\n    (get) => {\n      const result = get(sourceAtom)\n\n      if (result === null) {\n        return undefined\n      }\n\n      if (result.error) {\n        throw result.error\n      }\n      return result.data\n    },\n    (_get, set, action: Action) => set(handleActionAtom, action)\n  )\n\n  return [dataAtom, statusAtom] as const\n}\n", "import { Atom, Getter, WritableAtom, atom } from 'jotai'\n\ntype AnyError = unknown\n\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\ntype Subscription = {\n  unsubscribe: () => void\n}\n\ntype Observer<T> = {\n  next: (value: T) => void\n  error: (error: AnyError) => void\n  complete: () => void\n}\n\ntype ObservableLike<T> = {\n  [Symbol.observable]?: () => ObservableLike<T> | undefined\n} & (\n  | {\n      subscribe(observer: Observer<T>): Subscription\n    }\n  | {\n      subscribe(observer: Partial<Observer<T>>): Subscription\n    }\n  | {\n      subscribe(observer: Partial<Observer<T>>): Subscription\n      // Overload function to make typing happy\n      subscribe(next: (value: T) => void): Subscription\n    }\n)\n\ntype SubjectLike<T> = ObservableLike<T> & Observer<T>\n\ntype Options<Data> = {\n  initialValue?: Data | (() => Data)\n}\n\ntype OptionsWithInitialValue<Data> = {\n  initialValue: Data | (() => Data)\n}\n\nconst LOADING = Symbol('atomWithObservable is in loading state')\n\nexport function atomWithObservable<Data>(\n  getObservable: (get: Getter) => SubjectLike<Data>,\n  options: OptionsWithInitialValue<Data>\n): WritableAtom<Data, [Data], void>\n\nexport function atomWithObservable<Data>(\n  getObservable: (get: Getter) => SubjectLike<Data>,\n  options?: Options<Data>\n): WritableAtom<Data | Promise<Data>, [Data], void>\n\nexport function atomWithObservable<Data>(\n  getObservable: (get: Getter) => ObservableLike<Data>,\n  options: OptionsWithInitialValue<Data>\n): Atom<Data>\n\nexport function atomWithObservable<Data>(\n  getObservable: (get: Getter) => ObservableLike<Data>,\n  options?: Options<Data>\n): Atom<Data | Promise<Data>>\n\nexport function atomWithObservable<Data>(\n  getObservable: (get: Getter) => ObservableLike<Data> | SubjectLike<Data>,\n  options?: Options<Data>\n) {\n  type Result = { d: Data } | { e: AnyError }\n  const returnResultData = (result: Result) => {\n    if ('e' in result) {\n      throw result.e\n    }\n    return result.d\n  }\n\n  const observableResultAtom = atom((get) => {\n    let observable = getObservable(get)\n    const itself = observable[Symbol.observable]?.()\n    if (itself) {\n      observable = itself\n    }\n\n    const STATE: {\n      pending: Promise<Result> | undefined\n      resolve: ((result: Result) => void) | undefined\n      subscription: Subscription | undefined\n    } = {\n      pending: undefined,\n      resolve: undefined,\n      subscription: undefined,\n    }\n\n    const initialResult: Result | typeof LOADING =\n      options && 'initialValue' in options\n        ? {\n            d:\n              typeof options.initialValue === 'function'\n                ? (options.initialValue as () => Data)()\n                : (options.initialValue as Data),\n          }\n        : LOADING\n\n    const latestAtom = atom<Result | typeof LOADING>(initialResult)\n\n    const resultAtom = atom<Result | Promise<Result>, [Result], void>(\n      (get, { setSelf }) => {\n        if (!STATE.pending) {\n          STATE.pending = new Promise((resolve: (result: Result) => void) => {\n            STATE.resolve = resolve\n\n            STATE.subscription = observable.subscribe({\n              next: (d) => setSelf({ d }),\n              error: (e) => setSelf({ e }),\n              complete: () => {},\n            })\n          })\n        }\n\n        const latestData = get(latestAtom)\n        if (latestData !== LOADING) {\n          return latestData\n        }\n\n        return STATE.pending\n      },\n      (_get, set, result) => {\n        if (STATE.resolve === undefined) {\n          console.warn(\n            `atomWithObservable is in an invalid state, 'resolve' is undefined`\n          )\n          return\n        }\n\n        STATE.resolve(result)\n        set(latestAtom, result)\n      }\n    )\n\n    return [resultAtom, observable] as const\n  })\n\n  const observableAtom = atom(\n    (get) => {\n      const [resultAtom] = get(observableResultAtom)\n      const result = get(resultAtom)\n      if (result instanceof Promise) {\n        return result.then(returnResultData)\n      }\n      return returnResultData(result)\n    },\n    (get, _set, data: Data) => {\n      const [_resultAtom, observable] = get(observableResultAtom)\n\n      if ('next' in observable) {\n        observable.next(data)\n      } else {\n        throw new Error('observable is not subject')\n      }\n    }\n  )\n\n  return observableAtom\n}\n", "import {\n  ApolloClient,\n  DefaultContext,\n  DocumentNode,\n  MutationOptions,\n  OperationVariables,\n} from '@apollo/client'\nimport { Getter, atom } from 'jotai'\n\nimport { clientAtom } from './clientAtom'\n\nexport const atomWithMutation = <\n  Data,\n  Variables extends OperationVariables,\n  Context extends Record<string, any> = DefaultContext\n>(\n  mutation: DocumentNode,\n  onError?: (error: unknown) => void,\n  getClient: (get: Getter) => Promise<ApolloClient<unknown>> = (get) =>\n    get(clientAtom)\n) => {\n  return atom(\n    null,\n    async (\n      get,\n      _set,\n      options: Omit<MutationOptions<Data, Variables, Context>, 'mutation'>\n    ) => {\n      const client = await getClient(get)\n\n      try {\n        return client.mutate({\n          ...options,\n          mutation: mutation as any,\n        })\n      } catch (e) {\n        if (onError) {\n          onError(e)\n          return { data: undefined, errors: e }\n        }\n\n        throw e\n      }\n    }\n  )\n}\n"],
  "mappings": "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",
  "names": []
}
