{
  "version": 3,
  "sources": ["../src/index.ts", "../src/clientAtom.ts", "../src/atomWithQuery.ts", "../src/storeVersionAtom.ts", "../src/atomWithMutation.ts", "../src/atomOfFragment.ts"],
  "sourcesContent": ["export * from './clientAtom'\nexport * from './atomWithQuery'\nexport * from './atomWithMutation'\nexport * from './atomOfFragment'\n", "import { atom } from 'jotai'\nimport { ApolloClient } from '@apollo/client'\n\nlet client: ApolloClient<unknown> | null = null\nlet resolveClient: (client: ApolloClient<unknown>) => void\nconst clientPromise = new Promise<ApolloClient<unknown>>((resolve) => {\n  resolveClient = resolve\n})\n\nexport function initJotaiApollo(newClient: ApolloClient<unknown>) {\n  if (client !== null && client !== newClient) {\n    throw new Error(`Can setup jotai-apollo only once`)\n  }\n\n  client = newClient\n  resolveClient(client)\n}\n\nexport const clientAtom = atom(\n  () => client ?? clientPromise,\n  (_get, _set, client: ApolloClient<unknown>) => {\n    initJotaiApollo(client)\n  }\n)\n", "import {\n  ApolloClient,\n  OperationVariables,\n  ApolloQueryResult,\n  ObservableQuery,\n  ApolloError,\n  NetworkStatus,\n  WatchQueryOptions,\n} from '@apollo/client'\nimport { atom, Getter, WritableAtom } from 'jotai'\nimport { atomWithObservable } from 'jotai/utils'\n\nimport { clientAtom } from './clientAtom'\nimport storeVersionAtom from './storeVersionAtom'\nimport { Observer, PromiseOrValue } from './types'\n\ntype QueryArgs<\n  Variables extends object = OperationVariables,\n  Data = any\n> = Omit<WatchQueryOptions<Variables, Data>, 'fetchPolicy' | 'nextFetchPolicy'>\n\ntype AtomWithQueryAction = {\n  type: 'refetch'\n}\n\nexport const atomWithQuery = <\n  Data,\n  Variables extends object = OperationVariables\n>(\n  getArgs: (get: Getter) => QueryArgs<Variables, Data>,\n  onError?: (result: ApolloQueryResult<Data | undefined>) => void,\n  getClient: (get: Getter) => PromiseOrValue<ApolloClient<unknown>> = (get) =>\n    get(clientAtom)\n): WritableAtom<\n  Promise<ApolloQueryResult<Data | undefined>>,\n  [AtomWithQueryAction],\n  Promise<void>\n> => {\n  const handleActionAtom = atom(\n    null,\n    async (get, _set, action: AtomWithQueryAction) => {\n      const client = await getClient(get)\n      const args = getArgs(get)\n\n      if (action.type === 'refetch') {\n        await client.refetchQueries({\n          include: [args.query],\n        })\n      }\n    }\n  )\n\n  const wrapperAtom = atom(async (get) => {\n    const client = await getClient(get)\n\n    const sourceAtom = atomWithObservable(\n      (get) => {\n        const args = getArgs(get)\n\n        // Resetting on store-version change\n        get(storeVersionAtom(client))\n\n        return wrapObservable(\n          client.watchQuery({\n            ...args,\n            // Limiting to these settings for now, as this is the most sane behavior for atoms with query.\n            fetchPolicy: 'cache-first',\n          })\n        )\n      },\n      {\n        // If not mounted, but used anyway, the query will get unwatched after 10 seconds of inactivity\n        unstable_timeout: 10000,\n      }\n    )\n\n    return sourceAtom\n  })\n\n  return atom(\n    async (get) => {\n      const sourceAtom = await get(wrapperAtom)\n      const result = await get(sourceAtom)\n\n      if (result.error) {\n        if (onError) {\n          onError(result)\n        } else {\n          throw result.error\n        }\n      }\n\n      return result\n    },\n    (_get, set, action: AtomWithQueryAction) => set(handleActionAtom, action)\n  )\n}\n\ntype Subscription = {\n  unsubscribe: () => void\n}\n\nconst wrapObservable = <\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  observableQuery: ObservableQuery<TData, TVariables>\n) => ({\n  subscribe: (\n    observer: Partial<Observer<ApolloQueryResult<TData | undefined>>>\n  ): Subscription => {\n    let subscription = observableQuery.subscribe(onNext, onError)\n\n    function onNext(result: ApolloQueryResult<TData>) {\n      observer.next?.(result)\n    }\n\n    function onError(error: unknown) {\n      const last = observableQuery['last']\n      subscription.unsubscribe()\n\n      try {\n        observableQuery.resetLastResults()\n        subscription = observableQuery.subscribe(onNext, onError)\n      } finally {\n        observableQuery['last'] = last\n      }\n\n      const errorResult: ApolloQueryResult<TData | undefined> = {\n        data: observableQuery.getCurrentResult().data,\n        error: error as ApolloError,\n        loading: false,\n        networkStatus: NetworkStatus.error,\n      }\n\n      // Errors are returned as part of the result\n      observer.next?.(errorResult)\n    }\n\n    return {\n      unsubscribe: () => subscription.unsubscribe(),\n    }\n  },\n})\n", "import { ApolloClient } from '@apollo/client'\nimport { atomFamily, atomWithObservable } from 'jotai/utils'\n\nimport type { Observer } from './types'\n\n/**\n * Gets incremented when the Apollo client clears the store.\n */\nconst storeVersionAtom = atomFamily((client: ApolloClient<unknown>) => {\n  return atomWithObservable(\n    () => {\n      let version = 0\n\n      return {\n        subscribe(observer: Observer<number>) {\n          return {\n            unsubscribe: client.onClearStore(async () => {\n              observer.next(++version)\n            }),\n          }\n        },\n      }\n    },\n    { initialValue: 0, unstable_timeout: 10000 }\n  )\n})\n\nexport default storeVersionAtom\n", "import {\n  ApolloClient,\n  DefaultContext,\n  DocumentNode,\n  MutationOptions,\n  OperationVariables,\n} from '@apollo/client'\nimport { Getter, atom } from 'jotai'\n\nimport { clientAtom } from './clientAtom'\nimport { PromiseOrValue } from './types'\n\nexport const atomWithMutation = <\n  Data,\n  Variables extends OperationVariables,\n  Context extends Record<string, any> = DefaultContext\n>(\n  mutation: MutationOptions<Data, Variables, Context>['mutation'],\n  onError?: (error: unknown) => void,\n  getClient: (get: Getter) => PromiseOrValue<ApolloClient<unknown>> = (get) =>\n    get(clientAtom)\n) => {\n  return atom(\n    null,\n    async (\n      get,\n      _set,\n      options: Omit<MutationOptions<Data, Variables, Context>, 'mutation'>\n    ) => {\n      const client = await getClient(get)\n\n      try {\n        return client.mutate({\n          ...options,\n          mutation: mutation as any,\n        })\n      } catch (e) {\n        if (onError) {\n          onError(e)\n          return { data: undefined, errors: e }\n        }\n\n        throw e\n      }\n    }\n  )\n}\n", "import { loadable, atomWithObservable } from 'jotai/utils'\nimport { Atom, atom, Getter } from 'jotai'\nimport { DocumentNode, DataProxy, StoreObject } from '@apollo/client'\nimport { getFragmentQueryDocument } from '@apollo/client/utilities/graphql/fragments'\n\nimport { clientAtom } from './clientAtom'\nimport storeVersionAtom from './storeVersionAtom'\nimport { Observer } from './types'\n\ntype WatchFragmentArgs<Data = any> = {\n  fragment: DocumentNode\n  fragmentName: string\n  from: Partial<Data> | string | undefined\n  optimistic: boolean\n}\n\nconst DefaultDiffResult: DataProxy.DiffResult<unknown> = {\n  result: undefined,\n}\n\nconst fragmentToQueryDocMemo = new Map<DocumentNode, DocumentNode>()\nfunction getQueryDocForFragment(\n  fragmentDoc: DocumentNode,\n  fragmentName: string\n) {\n  let queryDoc = fragmentToQueryDocMemo.get(fragmentDoc)\n\n  if (!queryDoc) {\n    queryDoc = getFragmentQueryDocument(fragmentDoc, fragmentName)\n    fragmentToQueryDocMemo.set(fragmentDoc, queryDoc)\n  }\n\n  return queryDoc\n}\n\nexport const atomOfFragment = <Data extends StoreObject>(\n  getArgs: (get: Getter) => WatchFragmentArgs<Data>\n): Atom<DataProxy.DiffResult<Data>> => {\n  const wrapperAtom = atom((get) => {\n    const loadableClient = get(loadable(clientAtom))\n    if (loadableClient.state !== 'hasData') {\n      return null\n    }\n\n    const client = loadableClient.data\n\n    const { fragment, fragmentName, from, optimistic } = getArgs(get)\n    const id =\n      typeof from === 'string' || !from ? from : client.cache.identify(from)\n\n    const computeLatestResult = (): DataProxy.DiffResult<Data> => {\n      const latestData = client.readFragment<Data>(\n        {\n          fragment,\n          fragmentName,\n          id,\n        },\n        optimistic\n      )\n\n      return latestData\n        ? { complete: true, result: latestData }\n        : { complete: false }\n    }\n\n    const sourceAtom = atomWithObservable(\n      (get) => {\n        // Resetting on store-version change\n        get(storeVersionAtom(client))\n\n        return {\n          subscribe(observer: Observer<DataProxy.DiffResult<Data>>) {\n            const unsubscribe = client.cache.watch<Data>({\n              query: getQueryDocForFragment(fragment, fragmentName),\n              id,\n              callback: () => {\n                observer.next(computeLatestResult())\n              },\n              optimistic,\n              returnPartialData: true,\n              immediate: true,\n            })\n\n            return {\n              unsubscribe,\n            }\n          },\n        }\n      },\n      {\n        initialValue: computeLatestResult(),\n        unstable_timeout: 10000,\n      }\n    )\n\n    return sourceAtom\n  })\n\n  return atom((get) => {\n    const sourceAtom = get(wrapperAtom)\n\n    if (sourceAtom) {\n      return get(sourceAtom)\n    }\n\n    return DefaultDiffResult as DataProxy.DiffResult<Data>\n  })\n}\n"],
  "mappings": "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",
  "names": []
}
