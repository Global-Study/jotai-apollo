{
  "version": 3,
  "sources": ["../src/clientAtom.ts", "../src/atomsWithQuery.ts", "../src/common.ts", "../src/atomsWithSubscription.ts"],
  "sourcesContent": ["import { atom } from 'jotai'\nimport {\n  InMemoryCache,\n  ApolloClient,\n  NormalizedCacheObject,\n} from '@apollo/client'\n\nconst DEFAULT_URL =\n  (typeof process === 'object' && process.env.JOTAI_APOLLO_DEFAULT_URL) ||\n  '/graphql'\n\nlet defaultClient: ApolloClient<NormalizedCacheObject> | null = null\n\nexport const clientAtom = atom(() => {\n  if (!defaultClient) {\n    defaultClient = new ApolloClient({\n      uri: DEFAULT_URL,\n      cache: new InMemoryCache(),\n    })\n  }\n\n  return defaultClient\n})\n", "import {\n  ApolloClient,\n  OperationVariables,\n  QueryOptions,\n  ApolloQueryResult,\n} from '@apollo/client'\nimport { atom, Getter, WritableAtom } from 'jotai'\nimport { atomWithObservable } from 'jotai/utils'\n\nimport { clientAtom } from './clientAtom'\nimport { atomWithIncrement } from './common'\n\ntype QueryArgs<\n  Variables extends object = OperationVariables,\n  Data = any\n> = QueryOptions<Variables, Data>\n\ntype AtomWithQueryAction = {\n  type: 'refetch'\n}\n\nexport const atomsWithQuery = <\n  Data,\n  Variables extends object = OperationVariables\n>(\n  getArgs: (get: Getter) => QueryArgs<Variables, Data>,\n  getClient: (get: Getter) => ApolloClient<unknown> = (get) => get(clientAtom),\n  onError?: (result: ApolloQueryResult<Data>) => void\n): WritableAtom<ApolloQueryResult<Data> | undefined, AtomWithQueryAction> => {\n  const refreshAtom = atomWithIncrement(0)\n\n  const handleActionAtom = atom(\n    null,\n    (_get, set, action: AtomWithQueryAction) => {\n      if (action.type === 'refetch') {\n        set(refreshAtom)\n      }\n    }\n  )\n\n  const sourceAtom = atomWithObservable(\n    (get) => {\n      get(refreshAtom)\n      const args = getArgs(get)\n      const client = getClient(get)\n\n      return client.watchQuery(args)\n    },\n    { initialValue: null }\n  )\n\n  return atom(\n    (get) => {\n      const result = get(sourceAtom)\n\n      if (result === null) {\n        return undefined\n      }\n\n      if (result.error) {\n        if (onError) {\n          onError(result)\n        } else {\n          throw result.error\n        }\n      }\n\n      return result\n    },\n    (_get, set, action: AtomWithQueryAction) => set(handleActionAtom, action)\n  )\n}\n", "import { atom } from 'jotai'\nimport type { Getter } from 'jotai'\nimport { atomWithObservable } from 'jotai/utils'\nimport { ApolloClient, ApolloQueryResult } from '@apollo/client'\n\ntype Client<T extends unknown = unknown> = ApolloClient<T>\n\nexport type Observer<T> = {\n  next: (value: T) => void\n  error: (error: any) => void\n  complete: () => void\n}\n\nexport type Observable<T> = {\n  subscribe(observer: Partial<Observer<T>>): { unsubscribe: () => void }\n}\n\nexport const atomWithIncrement = (initialValue: number) => {\n  const internalAtom = atom(initialValue)\n\n  return atom(\n    (get) => get(internalAtom),\n    (_get, set) => set(internalAtom, (c) => c + 1)\n  )\n}\n\nexport const createAtoms = <\n  Args,\n  Data,\n  Source extends Observable<ApolloQueryResult<Data>>,\n  Action,\n  ActionResult extends Promise<void> | void = void\n>(\n  getArgs: (get: Getter) => Args,\n  getClient: (get: Getter) => Client,\n  execute: (client: Client, args: Args) => Source,\n  handleAction: (\n    action: Action,\n    client: Client,\n    refresh: () => void\n  ) => ActionResult\n) => {\n  const refreshAtom = atomWithIncrement(0)\n\n  const handleActionAtom = atom(null, (get, set, action: Action) => {\n    const client = getClient(get)\n    const refresh = () => set(refreshAtom)\n\n    return handleAction(action, client, refresh)\n  })\n\n  const sourceAtom = atomWithObservable(\n    (get) => {\n      get(refreshAtom)\n      const args = getArgs(get)\n      const client = getClient(get)\n\n      return execute(client, args)\n    },\n    { initialValue: null }\n  )\n\n  const statusAtom = atom(\n    (get) => get(sourceAtom),\n    (_get, set, action: Action) => set(handleActionAtom, action)\n  )\n\n  const dataAtom = atom(\n    (get) => {\n      const result = get(sourceAtom)\n\n      if (result === null) {\n        return undefined\n      }\n\n      if (result.error) {\n        throw result.error\n      }\n      return result.data\n    },\n    (_get, set, action: Action) => set(handleActionAtom, action)\n  )\n\n  return [dataAtom, statusAtom] as const\n}\n", "import {\n  ApolloClient,\n  OperationVariables,\n  SubscriptionOptions,\n  SubscriptionResult,\n} from '@apollo/client'\nimport { WritableAtom } from 'jotai'\nimport type { Getter } from 'jotai'\nimport { clientAtom } from './clientAtom'\nimport { createAtoms } from './common'\n\ntype Action = {\n  readonly type: 'refetch'\n}\n\nexport function atomsWithSubscription<\n  Data,\n  Variables extends object = OperationVariables\n>(\n  getArgs: (get: Getter) => SubscriptionOptions<Variables, Data>,\n  getClient: (get: Getter) => ApolloClient<any> = (get) => get(clientAtom)\n): readonly [\n  dataAtom: WritableAtom<Data | undefined, Action>,\n  statusAtom: WritableAtom<SubscriptionResult<Data, Variables> | null, Action>\n] {\n  return createAtoms(\n    (get) => getArgs(get),\n    getClient,\n    (client, args) => {\n      return client.subscribe(args)\n    },\n    (action, _client, refresh) => {\n      if (action.type === 'refetch') {\n        refresh()\n        return\n      }\n    }\n  )\n}\n"],
  "mappings": ";AAAA;AACA;AAAA;AAAA;AAAA;AAMA,IAAM,cACH,OAAO,YAAY,YAAY,QAAQ,IAAI,4BAC5C;AAEF,IAAI,gBAA4D;AAEzD,IAAM,aAAa,KAAK,MAAM;AACnC,MAAI,CAAC,eAAe;AAClB,oBAAgB,IAAI,aAAa;AAAA,MAC/B,KAAK;AAAA,MACL,OAAO,IAAI;AAAA;AAAA;AAIf,SAAO;AAAA;;;ACfT;AACA;;;ACPA;AAEA;AAeO,IAAM,oBAAoB,CAAC,iBAAyB;AACzD,QAAM,eAAe,MAAK;AAE1B,SAAO,MACL,CAAC,QAAQ,IAAI,eACb,CAAC,MAAM,QAAQ,IAAI,cAAc,CAAC,MAAM,IAAI;AAAA;AAIzC,IAAM,cAAc,CAOzB,SACA,WACA,SACA,iBAKG;AACH,QAAM,cAAc,kBAAkB;AAEtC,QAAM,mBAAmB,MAAK,MAAM,CAAC,KAAK,KAAK,WAAmB;AAChE,UAAM,SAAS,UAAU;AACzB,UAAM,UAAU,MAAM,IAAI;AAE1B,WAAO,aAAa,QAAQ,QAAQ;AAAA;AAGtC,QAAM,aAAa,mBACjB,CAAC,QAAQ;AACP,QAAI;AACJ,UAAM,OAAO,QAAQ;AACrB,UAAM,SAAS,UAAU;AAEzB,WAAO,QAAQ,QAAQ;AAAA,KAEzB,EAAE,cAAc;AAGlB,QAAM,aAAa,MACjB,CAAC,QAAQ,IAAI,aACb,CAAC,MAAM,KAAK,WAAmB,IAAI,kBAAkB;AAGvD,QAAM,WAAW,MACf,CAAC,QAAQ;AACP,UAAM,SAAS,IAAI;AAEnB,QAAI,WAAW,MAAM;AACnB,aAAO;AAAA;AAGT,QAAI,OAAO,OAAO;AAChB,YAAM,OAAO;AAAA;AAEf,WAAO,OAAO;AAAA,KAEhB,CAAC,MAAM,KAAK,WAAmB,IAAI,kBAAkB;AAGvD,SAAO,CAAC,UAAU;AAAA;;;AD9Db,IAAM,iBAAiB,CAI5B,SACA,YAAoD,CAAC,QAAQ,IAAI,aACjE,YAC2E;AAC3E,QAAM,cAAc,kBAAkB;AAEtC,QAAM,mBAAmB,MACvB,MACA,CAAC,MAAM,KAAK,WAAgC;AAC1C,QAAI,OAAO,SAAS,WAAW;AAC7B,UAAI;AAAA;AAAA;AAKV,QAAM,aAAa,oBACjB,CAAC,QAAQ;AACP,QAAI;AACJ,UAAM,OAAO,QAAQ;AACrB,UAAM,SAAS,UAAU;AAEzB,WAAO,OAAO,WAAW;AAAA,KAE3B,EAAE,cAAc;AAGlB,SAAO,MACL,CAAC,QAAQ;AACP,UAAM,SAAS,IAAI;AAEnB,QAAI,WAAW,MAAM;AACnB,aAAO;AAAA;AAGT,QAAI,OAAO,OAAO;AAChB,UAAI,SAAS;AACX,gBAAQ;AAAA,aACH;AACL,cAAM,OAAO;AAAA;AAAA;AAIjB,WAAO;AAAA,KAET,CAAC,MAAM,KAAK,WAAgC,IAAI,kBAAkB;AAAA;;;AEtD/D,+BAIL,SACA,YAAgD,CAAC,QAAQ,IAAI,aAI7D;AACA,SAAO,YACL,CAAC,QAAQ,QAAQ,MACjB,WACA,CAAC,QAAQ,SAAS;AAChB,WAAO,OAAO,UAAU;AAAA,KAE1B,CAAC,QAAQ,SAAS,YAAY;AAC5B,QAAI,OAAO,SAAS,WAAW;AAC7B;AACA;AAAA;AAAA;AAAA;",
  "names": []
}
