{
  "version": 3,
  "sources": ["../src/index.ts", "../src/clientAtom.ts", "../src/atomWithQuery.ts", "../src/common.ts", "../src/atomWithMutation.ts", "../src/atomsWithSubscription.ts"],
  "sourcesContent": ["export * from './clientAtom'\nexport * from './atomWithQuery'\nexport * from './atomWithMutation'\nexport * from './atomsWithSubscription'\n", "import {\n  InMemoryCache,\n  ApolloClient,\n  NormalizedCacheObject,\n} from '@apollo/client'\nimport { atom } from 'jotai'\n\nconst DEFAULT_URL =\n  (typeof process === 'object' && process.env.JOTAI_APOLLO_DEFAULT_URL) ||\n  '/graphql'\n\nlet defaultClient: ApolloClient<NormalizedCacheObject> | null = null\n\nconst customClientAtom = atom<ApolloClient<unknown> | null>(null)\n\nexport const clientAtom = atom(\n  (get) => {\n    const customClient = get(customClientAtom)\n\n    if (customClient) {\n      return customClient\n    }\n\n    if (!defaultClient) {\n      defaultClient = new ApolloClient({\n        uri: DEFAULT_URL,\n        cache: new InMemoryCache(),\n      })\n    }\n\n    return defaultClient\n  },\n  (_get, set, client: ApolloClient<unknown>) => {\n    set(customClientAtom, client)\n  }\n)\n", "import {\n  ApolloClient,\n  OperationVariables,\n  QueryOptions,\n  ApolloQueryResult,\n  ObservableQuery,\n  ApolloError,\n  NetworkStatus,\n} from '@apollo/client'\nimport { atomWithObservable } from 'jotai/utils'\nimport { atom, Getter, WritableAtom } from 'jotai'\n\nimport { clientAtom } from './clientAtom'\nimport { atomWithIncrement } from './common'\n\ntype QueryArgs<\n  Variables extends object = OperationVariables,\n  Data = any\n> = QueryOptions<Variables, Data>\n\ntype AtomWithQueryAction = {\n  type: 'refetch'\n}\n\nexport const atomWithQuery = <\n  Data,\n  Variables extends object = OperationVariables\n>(\n  getArgs: (get: Getter) => QueryArgs<Variables, Data>,\n  onError?: (result: ApolloQueryResult<Data | undefined>) => void,\n  getClient: (get: Getter) => ApolloClient<unknown> = (get) => get(clientAtom)\n): WritableAtom<\n  ApolloQueryResult<Data | undefined> | undefined,\n  [AtomWithQueryAction],\n  void\n> => {\n  const refreshAtom = atomWithIncrement(0)\n\n  const handleActionAtom = atom(\n    null,\n    (_get, set, action: AtomWithQueryAction) => {\n      if (action.type === 'refetch') {\n        set(refreshAtom)\n      }\n    }\n  )\n\n  const sourceAtom = atomWithObservable(\n    (get) => {\n      get(refreshAtom)\n      const args = getArgs(get)\n      const client = getClient(get)\n\n      return wrapObservable(client.watchQuery(args))\n    },\n    { initialValue: null }\n  )\n\n  return atom(\n    (get) => {\n      const result = get(sourceAtom)\n\n      if (result === null) {\n        return undefined\n      }\n\n      if (result.error) {\n        if (onError) {\n          onError(result)\n        } else {\n          throw result.error\n        }\n      }\n\n      return result\n    },\n    (_get, set, action: AtomWithQueryAction) => set(handleActionAtom, action)\n  )\n}\n\ntype Observer<T> = {\n  next: (value: T) => void\n  error: (error: unknown) => void\n  complete: () => void\n}\n\ntype Subscription = {\n  unsubscribe: () => void\n}\n\nconst wrapObservable = <\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  observableQuery: ObservableQuery<TData, TVariables>\n) => ({\n  subscribe: (\n    observer: Partial<Observer<ApolloQueryResult<TData | undefined>>>\n  ): Subscription => {\n    let subscription = observableQuery.subscribe(onNext, onError)\n\n    function onNext(result: ApolloQueryResult<TData>) {\n      observer.next?.(result)\n    }\n\n    function onError(error: unknown) {\n      const last = observableQuery.getLastResult()\n      subscription.unsubscribe()\n\n      try {\n        observableQuery.resetLastResults()\n        subscription = observableQuery.subscribe(onNext, onError)\n      } finally {\n        // eslint-disable-next-line no-param-reassign, dot-notation\n        observableQuery['last'] = last\n      }\n\n      const errorResult: ApolloQueryResult<TData | undefined> = {\n        data: observableQuery.getCurrentResult().data,\n        error: error as ApolloError,\n        loading: false,\n        networkStatus: NetworkStatus.error,\n      }\n\n      // Errors are returned as part of the result\n      observer.next?.(errorResult)\n    }\n\n    return {\n      unsubscribe: () => subscription.unsubscribe(),\n    }\n  },\n})\n", "import { atom } from 'jotai'\nimport type { Getter } from 'jotai'\nimport { atomWithObservable } from 'jotai/utils'\nimport { ApolloClient, ApolloQueryResult } from '@apollo/client'\n\ntype Client<T extends unknown = unknown> = ApolloClient<T>\n\nexport type Observer<T> = {\n  next: (value: T) => void\n  error: (error: any) => void\n  complete: () => void\n}\n\nexport type Observable<T> = {\n  subscribe(observer: Partial<Observer<T>>): { unsubscribe: () => void }\n}\n\nexport const atomWithIncrement = (initialValue: number) => {\n  const internalAtom = atom(initialValue)\n\n  return atom(\n    (get) => get(internalAtom),\n    (_get, set) => set(internalAtom, (c) => c + 1)\n  )\n}\n\nexport const createAtoms = <\n  Args,\n  Data,\n  Source extends Observable<ApolloQueryResult<Data>>,\n  Action,\n  ActionResult extends Promise<void> | void = void\n>(\n  getArgs: (get: Getter) => Args,\n  getClient: (get: Getter) => Client,\n  execute: (client: Client, args: Args) => Source,\n  handleAction: (\n    action: Action,\n    client: Client,\n    refresh: () => void\n  ) => ActionResult\n) => {\n  const refreshAtom = atomWithIncrement(0)\n\n  const handleActionAtom = atom(null, (get, set, action: Action) => {\n    const client = getClient(get)\n    const refresh = () => set(refreshAtom)\n\n    return handleAction(action, client, refresh)\n  })\n\n  const sourceAtom = atomWithObservable(\n    (get) => {\n      get(refreshAtom)\n      const args = getArgs(get)\n      const client = getClient(get)\n\n      return execute(client, args)\n    },\n    { initialValue: null }\n  )\n\n  const statusAtom = atom(\n    (get) => get(sourceAtom),\n    (_get, set, action: Action) => set(handleActionAtom, action)\n  )\n\n  const dataAtom = atom(\n    (get) => {\n      const result = get(sourceAtom)\n\n      if (result === null) {\n        return undefined\n      }\n\n      if (result.error) {\n        throw result.error\n      }\n      return result.data\n    },\n    (_get, set, action: Action) => set(handleActionAtom, action)\n  )\n\n  return [dataAtom, statusAtom] as const\n}\n", "import {\n  ApolloClient,\n  DefaultContext,\n  DocumentNode,\n  MutationOptions,\n  OperationVariables,\n} from '@apollo/client'\nimport { Getter, atom } from 'jotai'\n\nimport { clientAtom } from './clientAtom'\n\nexport const atomWithMutation = <\n  Data,\n  Variables extends OperationVariables,\n  Context extends Record<string, any> = DefaultContext\n>(\n  mutation: DocumentNode,\n  onError?: (error: unknown) => void,\n  getClient: (get: Getter) => ApolloClient<unknown> = (get) => get(clientAtom)\n) => {\n  return atom(\n    null,\n    async (\n      get,\n      _set,\n      options: Omit<MutationOptions<Data, Variables, Context>, 'mutation'>\n    ) => {\n      const client = getClient(get)\n\n      try {\n        return client.mutate({\n          ...options,\n          mutation: mutation as any,\n        })\n      } catch (e) {\n        if (onError) {\n          onError(e)\n          return { data: undefined, errors: e }\n        }\n\n        throw e\n      }\n    }\n  )\n}\n", "import {\n  ApolloClient,\n  OperationVariables,\n  SubscriptionOptions,\n  SubscriptionResult,\n} from '@apollo/client'\nimport { WritableAtom } from 'jotai'\nimport type { Getter } from 'jotai'\nimport { clientAtom } from './clientAtom'\nimport { createAtoms } from './common'\n\ntype Action = {\n  readonly type: 'refetch'\n}\n\nexport function atomsWithSubscription<\n  Data,\n  Variables extends object = OperationVariables\n>(\n  getArgs: (get: Getter) => SubscriptionOptions<Variables, Data>,\n  getClient: (get: Getter) => ApolloClient<any> = (get) => get(clientAtom)\n): readonly [\n  dataAtom: WritableAtom<Data | undefined, [Action], void>,\n  statusAtom: WritableAtom<\n    SubscriptionResult<Data, Variables> | null,\n    [Action],\n    void\n  >\n] {\n  return createAtoms(\n    (get) => getArgs(get),\n    getClient,\n    (client, args) => {\n      return client.subscribe(args)\n    },\n    (action, _client, refresh) => {\n      if (action.type === 'refetch') {\n        refresh()\n        return\n      }\n    }\n  )\n}\n"],
  "mappings": "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",
  "names": []
}
